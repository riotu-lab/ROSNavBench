#  Name the experiment. This name will be the name of the report
experiment_name: "dynamic_obstacles_scenario_report"

#Save directory of results
results_directory: '/home/riot/src/ros2_ws/src/ROSNavBench/results'

#  Add the absolute path of the world
world_path: "/home/riot/src/ros2_ws/src/ROSNavBench/simulations/worlds/industrial_warehouse.world"

#  Add the absolute path of the map
map_path: "/home/riot/src/ros2_ws/src/ROSNavBench/simulations/maps/warehouse_slam_toolbox.yaml"

#  Add the absolute path of the map
map_png_path: "/home/riot/src/ros2_ws/src/ROSNavBench/simulations/maps/warehouse_slam_toolbox.pgm"

#  Add gazebo model path, if multiple path, please spereate them by a :
models_path: "/opt/ros/humble/share/turtlebot3_gazebo/models:/home/riot/src/ros2_ws/src/ROSNavBench/simulations/models"

#  Choose a type of global local planners to be tested
planner_type: ["NavFn", "smac_planner", "HybridA", "ThetaStar"] 
#  Choose one of the following controllers, by adding its name to the controller type list
#  Note that these are the avaible controllers for the provided example
#  DWB
#  RPP
#  RPP_RSC
#  DWB_RSC
controller_type: ["DWB_RSC","RPP", "DWB", "RPP_RSC"] #name of behaviour tree

#  This option is intended for testing the same controller several times
#  if the user do not need this test, set it to zero 
trails_num: 0

#  Add the absolute path of the robot navigation configuration
nav_config:  "/home/riot/src/ros2_ws/src/ROSNavBench/examples/turtlebot3/nav2_config/waffle.yaml"


#  Add the directory of the behaviour tree
behaviour_tree_directory: "/home/riot/src/ros2_ws/src/ROSNavBench/examples/turtlebot3/behavior_trees"


#  Add the absolute path of the urdf and model files inside single qoutes ''
urdf_file: "/opt/ros/humble/share/turtlebot3_description/urdf/turtlebot3_waffle.urdf"


#  If the robot is spawned by only urdf, then set the model_file to 'None'
model_file: "/opt/ros/humble/share/turtlebot3_gazebo/models/turtlebot3_waffle/model.sdf"

#  Provide the pose in a decimal form
spawn_pose_x: 0.0        #4.0
spawn_pose_y: 0.0        #-4.0
spawn_pose_yaw: 0.0      #1.58   #radians 


#  Specify either to send one goal, specific trajectory, or several waypoints 
#  square, circle, several_waypoints, one_goal
trajectory_type: 'several_waypoints'

# Specify way points in this formate [[x0,y0,yaw0_radians], [x1,y1,yaw1_radians], ...]
waypoints: [[6.0,2.0,-3.13], [6.0,-2.0,-3.13], [-3.5,3.5,-3.13]]
#[[6.0,2.0,-3.13],[-2.44,3.5,-3.13]]
#[[-1.83,3.26,1.5],[-4.0,0.17,1.5],[-1.39,-3.82,1.5],[4.0,-4.0,1.5]]

